---
title: Dithering
---

<style>
  .canvas-container {
    display: flex;
    justify-content: center;
  }

  #originalCanvas,
  #canvas {
    margin: 0 10px;
  }
</style>


<select id="imageSelector">
{% for image in images %}
  <option value="{{ image }}">{{ image }}</option>
{% endfor %}
</select>

<div class="canvas-container">
  <canvas id="originalCanvas"></canvas>
  <canvas id="canvas"></canvas>
</div>

<script>
const originalCanvas = document.getElementById('originalCanvas');
const originalCtx = originalCanvas.getContext('2d');
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const img = new Image();
const imageSelector = document.getElementById('imageSelector');

// Load the initially selected image.
img.src = imageSelector.value;
img.crossOrigin = 'anonymous';

imageSelector.addEventListener('change', () => {
  img.src = imageSelector.value;
});

img.onload = () => {
  // Draw the original image
  originalCanvas.width = img.width;
  originalCanvas.height = img.height;
  originalCtx.drawImage(img, 0, 0);

  // Draw the dithered image
  canvas.width = img.width;
  canvas.height = img.height;
  ctx.drawImage(img, 0, 0);
  applyFloydSteinbergDithering(ctx, canvas.width, canvas.height);
};

function applyFloydSteinbergDithering(ctx, width, height) {
    const imageData = ctx.getImageData(0, 0, width, height);
    const data = imageData.data;

    for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
        const index = (y * width + x) * 4;
        const oldPixel = [data[index], data[index + 1], data[index + 2]];
        const newPixel = oldPixel.map(channel => channel < 128 ? 0 : 255);
        const quantError = oldPixel.map((channel, i) => channel - newPixel[i]);

        data[index] = newPixel[0];
        data[index + 1] = newPixel[1];
        data[index + 2] = newPixel[2];

        distributeError(x + 1, y, quantError, 7 / 16);
        distributeError(x - 1, y + 1, quantError, 3 / 16);
        distributeError(x, y + 1, quantError, 5 / 16);
        distributeError(x + 1, y + 1, quantError, 1 / 16);
    }
    }

    ctx.putImageData(imageData, 0, 0);

    function distributeError(x, y, quantError, factor) {
    if (x < 0 || x >= width || y < 0 || y >= height) return;
    const index = (y * width + x) * 4;
    data[index] = Math.max(0, Math.min(255, data[index] + quantError[0] * factor));
    data[index + 1] = Math.max(0, Math.min(255, data[index + 1] + quantError[1] * factor));
    data[index + 2] = Math.max(0, Math.min(255, data[index + 2] + quantError[2] * factor));
    }
}
</script>